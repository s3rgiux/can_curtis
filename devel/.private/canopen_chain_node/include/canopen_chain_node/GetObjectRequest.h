// Generated by gencpp from file canopen_chain_node/GetObjectRequest.msg
// DO NOT EDIT!


#ifndef CANOPEN_CHAIN_NODE_MESSAGE_GETOBJECTREQUEST_H
#define CANOPEN_CHAIN_NODE_MESSAGE_GETOBJECTREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace canopen_chain_node
{
template <class ContainerAllocator>
struct GetObjectRequest_
{
  typedef GetObjectRequest_<ContainerAllocator> Type;

  GetObjectRequest_()
    : node()
    , object()
    , cached(false)  {
    }
  GetObjectRequest_(const ContainerAllocator& _alloc)
    : node(_alloc)
    , object(_alloc)
    , cached(false)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _node_type;
  _node_type node;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _object_type;
  _object_type object;

   typedef uint8_t _cached_type;
  _cached_type cached;





  typedef boost::shared_ptr< ::canopen_chain_node::GetObjectRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::canopen_chain_node::GetObjectRequest_<ContainerAllocator> const> ConstPtr;

}; // struct GetObjectRequest_

typedef ::canopen_chain_node::GetObjectRequest_<std::allocator<void> > GetObjectRequest;

typedef boost::shared_ptr< ::canopen_chain_node::GetObjectRequest > GetObjectRequestPtr;
typedef boost::shared_ptr< ::canopen_chain_node::GetObjectRequest const> GetObjectRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::canopen_chain_node::GetObjectRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::canopen_chain_node::GetObjectRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::canopen_chain_node::GetObjectRequest_<ContainerAllocator1> & lhs, const ::canopen_chain_node::GetObjectRequest_<ContainerAllocator2> & rhs)
{
  return lhs.node == rhs.node &&
    lhs.object == rhs.object &&
    lhs.cached == rhs.cached;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::canopen_chain_node::GetObjectRequest_<ContainerAllocator1> & lhs, const ::canopen_chain_node::GetObjectRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace canopen_chain_node

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::canopen_chain_node::GetObjectRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::canopen_chain_node::GetObjectRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::canopen_chain_node::GetObjectRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::canopen_chain_node::GetObjectRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::canopen_chain_node::GetObjectRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::canopen_chain_node::GetObjectRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::canopen_chain_node::GetObjectRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1a2164c691b225d4aa9cfac9d5e53364";
  }

  static const char* value(const ::canopen_chain_node::GetObjectRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1a2164c691b225d4ULL;
  static const uint64_t static_value2 = 0xaa9cfac9d5e53364ULL;
};

template<class ContainerAllocator>
struct DataType< ::canopen_chain_node::GetObjectRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "canopen_chain_node/GetObjectRequest";
  }

  static const char* value(const ::canopen_chain_node::GetObjectRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::canopen_chain_node::GetObjectRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string node\n"
"string object\n"
"bool cached\n"
;
  }

  static const char* value(const ::canopen_chain_node::GetObjectRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::canopen_chain_node::GetObjectRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.node);
      stream.next(m.object);
      stream.next(m.cached);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetObjectRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::canopen_chain_node::GetObjectRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::canopen_chain_node::GetObjectRequest_<ContainerAllocator>& v)
  {
    s << indent << "node: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.node);
    s << indent << "object: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.object);
    s << indent << "cached: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.cached);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CANOPEN_CHAIN_NODE_MESSAGE_GETOBJECTREQUEST_H
